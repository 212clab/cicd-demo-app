name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 1. Docker Buildx 설정 (멀티 플랫폼 빌드를 위한 설정)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 2. Frontend 빌드 및 푸시 (멀티 플랫폼)
      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend # 빌드할 디렉토리
          push: true # 빌드 후 푸시
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          platforms: linux/amd64,linux/arm64 # <-- 이 부분이 핵심!

      # 3. Backend 빌드 및 푸시 (멀티 플랫폼)
      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend # 빌드할 디렉토리
          push: true # 빌드 후 푸시
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          platforms: linux/amd64,linux/arm64 # <-- 이 부분이 핵심!

      # --- 기존에 있던 다른 스텝들은 그대로 둡니다 ---

      - name: Test Backend
        run: |
          cd backend
          npm install
          npm test

      - name: Deployment notification
        run: |
          echo "✅ Images pushed to GHCR"
          echo "🔄 Watchtower will auto-deploy in 5 minutes"
